# Set '-eu' options for shell commands. These options are used to have safer
#   shell commands. Option '-e' is used to exit on error and option '-u' is used
#   to give error for unset variables.
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands. This is useful
#   to automatically split file names in $fs and $fx properly since default file
#   separator used in these variables (i.e. 'filesep' option) is newline. You
#   need to consider the values of these options and create your commands
#   accordingly.
set ifs "\n"

# Leave some space at the top and the bottom of the screen.
set scrolloff 3

# Use the `dim` attribute instead of underline for the cursor in the preview
#   pane.
set cursorpreviewfmt "\033[7;2m"

# Interpreter for shell commands.
set shell zsh

# Remove all default keybindings.
clearmaps

# Read a shell command to execute.
map '$' shell

# Read a shell command to execute piping its standard I/O to the bottom
#   statline.
map '%' shell-pipe

# Read a shell command to execute and wait for a key press in the end.
map '!' shell-wait

# Read a shell command to execute asynchronously without standard I/O.
map '&' shell-async

# Synchronize the terminal and redraw the screen.
map rd redraw

# Flush the cache and reload all files and directories.
map rl reload

# Quit lf and return to the shell.
map q quit

# Navigation commands.
map <up> up
map <down> down
map u page-up
map d page-down
map U top
map D bottom

map <left> updir
map <backspace2> updir

map <right> open
map <enter> open

# Selection command.
map <space> toggle

# Select/unselect files that match the glob.
map ts push :glob-select<space>
map tu push :glob-unselect<space>

# Reverse the selection.
map ti invert
map tb invert-below

# Copy, move, paste commands.
map c copy
map C cut
map p paste
map l clear

# Bookmark work commands.
map ms mark-save
map ml mark-load
map mr mark-remove

# Show the result of execution of previous commands
map ` !true

# Execute current file.
map x $$f 
map X !$f

# Make directory.
map <c-d> :push %mkdir<space>
map <f-7> :push %mkdir<space>

# Create file.
map <c-f> :push %touch<space>
map <f-5> :push %touch<space>

# Rename file.
map <c-r> rename
map <f-6> rename

# Make sure trash folder exists and move current file or selected files to trash
#   folder.
%mkdir -p ~/.trash
cmd trash ${{
    set -f
    for file in $fx; do
        base=$(basename "$file")
        dest="$HOME/.trash/$base"
        if [[ -e "$dest" ]]; then
            new_dest="${dest}_$(date +'%Y%m%d_%H%M%S')"
            mv "$file" "$new_dest"
        else
            mv "$file" "$dest"
        fi
    done
}}
map <delete> trash
map <f-8> trash

# Compress current file or selected files with tar and gunzip.
cmd create-tar-archive ${{
    set -f
    tmpdir=$(mktemp -d)
    cp -r $(echo "$fx") $tmpdir
    tar czf "achive.tar.gz" $tmpdir
    rm -rf $tmpdir
}}
map at create-tar-archive

# Compress current file or selected files with zip.
cmd create-zip-archive ${{
    set -f
    tmpdir=$(mktemp -d)
    cp -r $(echo "$fx") $tmpdir
    zip -r "achive.zip" $tmpdir
    rm -rf $tmpdir
}}
map az create-zip-archive

# Extract the current file with the right command.
cmd extract-archive ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}
map ae extract-archive

# Copy the current dir to the clipboard.
cmd copy-current-dir-to-clipboard ${{
    echo "$PWD" | pbcopy
}}
map <a-d> copy-current-dir-to-clipboard

# Copy the current file name to the clipboard.
cmd copy-full-file-name-to-clipboard ${{
    echo "$f" | pbcopy
}}
map <a-f> copy-full-file-name-to-clipboard

# Open the current file in finder.
cmd open-in-finder ${{
    open -a Finder "$PWD"
}}
map <a-o> open-in-finder

# Show hidden files and directories
map zh set hidden!

# Reverse the direction of sort.
map zr set reverse!

# Display info commands.
map zn set info
map zs set info size
map zt set info time
map za set info size:time
map zd calcdirsize

# Sort commands.
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

# Go to the home directory
map gh cd ~
map gl cd ~/Library
map gd cd ~/Downloads
map gp cd ~/projects
map gr cd /
map G push :cd<space>

# Find the appropriate file name match in the forward/backward direction and
#   jump to the next/previous match.
map f find
map F find-back
map ] find-next
map [ find-prev

# Search for a file name match in the forward/backward direction and jump to the
#   next/previous match.
map / search
map ? search-back
map n search-next
map N search-prev
